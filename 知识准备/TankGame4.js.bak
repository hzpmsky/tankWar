     //颜色数组
	 var  myTankColor =new Array("#BA9658","red");
	 var  enemyColor =new Array("blue","green","purple");
	 
	 //子弹类
	 function Bullet(x,y,direct,speed){
	   this.x=x;
	   this.y=y;
	   this.direct=direct;
	   this.speed=1;
	   this.timer=null;
	   this.isLive=true;
	   this.run=function run(){
         //先判断子弹是否到边界，如果是，关闭定时器；否则继续修改子弹的坐标
         if (this.x<=0||this.x>=700||this.y<=0||this.y>=400)
         {
			 clearInterval(this.timer);
			 this.isLive=false;
         }else{
	     switch(this.direct){
		   case 0:
               this.y-=this.speed;
			   break;
		   case 1:
               this.x+=this.speed;
			   break;
		   case 2:
               this.y+=this.speed;
			   break;
		   case 3:
               this.x-=this.speed;
			   break;
		   }
		 }
		 document.getElementById('s1').innerHTML="子弹x:"+this.x+"子弹y:"+this.y;
	   }
	 }
	 //坦克类
	 function Tank(x,y,direct,color){
	    this.x=x;
		this.y=y;
		this.speed=1;
		this.direct=direct;
		this.color=color;
		//上
		this.moveUp=function(){
			this.y-=this.speed;
			this.direct=0;
		}
		//右
		this.moveRight=function(){
			this.x+=this.speed;
			this.direct=1;
		}

		//下
		this.moveDown=function(){
			this.y+=this.speed;
			this.direct=2;
		}
		//左
		this.moveLeft=function(){
			this.x-=this.speed;
			this.direct=3;
		}
	  }
	  //定义MyTank类，继承自Tank
	  function MyTank(x,y,direct,color){
	    this.tank=Tank;
		this.tank(x,y,direct,color);

		this.shot=function(){

	   //创建子弹，想想子弹的位置和方向
	   switch(this.direct){
          case 0:
		  myBullet= new Bullet(this.x+10+14,this.y-10,this.direct,this.speed);
		  break;
		  case 1:
		  myBullet= new Bullet(this.x+40+10,this.y+10+14,this.direct,this.speed);
		  break;
		  case 2:
		  myBullet= new Bullet(this.x+10+14,this.y+40+10,this.direct,this.speed);
		  break;
		  case 3:
		  myBullet= new Bullet(this.x-10,this.y+10+14,this.direct,this.speed);
		  break;
	      }
	   
		}
	  }
	  //创建 myBullet实例后，调用myBullet的run()方法
	  var timer= setInterval("myBullet.run()",50);
	  //将timer赋给子弹
      Bullet.timer=timer;
	  //定义敌人EnemyTank类，继承自Tank
      function EnemyTank(x,y,direct,color){
	    this.tank=Tank;
		this.tank(x,y,direct,color);
	  }
	  //画子弹
     function drawMyBullet(){
		 if(myBullet!=null&&muBullet.isLive){//当子弹不空的时候，绘画子弹
	   ctx.fillStyle='yellow';
	   console.log('myBullet.x'+myBullet.x);
	   ctx.fillRect(myBullet.x,myBullet.y,3,3);}
	 }
    //绘制Tank
	function drawTank(tank){
      //画坦克的时候考虑方向
	switch(tank.direct){
	  case 0:
	  case 2:
		  ctx.fillStyle=tank.color[0];
		  ctx.fillRect(tank.x,tank.y,10,40); 
		  ctx.beginPath();
		  ctx.fillStyle=tank.color[1];
		  ctx.arc(tank.x+10+14,tank.y+20,14,0,2*Math.PI,true);
		  ctx.closePath();
		  ctx.fill();
		  ctx.fillStyle=tank.color[0];
		  ctx.fillRect(tank.x+10+28,tank.y,10,40);
		 //console.log(tank.x,tank.y);
            ctx.strokeStyle='white';
		  ctx.lineWidth=1.5;
		  ctx.beginPath();
         
		  ctx.moveTo(tank.x+10+14,tank.y+20);
		  if(tank.direct==0){
		  ctx.lineTo(tank.x+10+14,tank.y-10);}
		  else if(tank.direct==2){
		  ctx.lineTo(tank.x+10+14,tank.y+20+30);}

		  ctx.closePath();
		  ctx.stroke();
		  break;
	  case 1:
	  case 3:
		  ctx.fillStyle=tank.color[0];
          ctx.fillRect(tank.x,tank.y,40,10);
          ctx.beginPath();
		  ctx.fillStyle=tank.color[1];
		  ctx.arc(tank.x+20,tank.y+10+14,14,0,2*Math.PI,true);
		  ctx.closePath();
		  ctx.fill();
		  ctx.fillStyle=tank.color[0];
		  ctx.fillRect(tank.x,tank.y+10+14*2,40,10);
          //画炮杆
		  ctx.strokeStyle='white';
          ctx.lineWidth=1.5;
		  ctx.beginPath();

		  ctx.moveTo(tank.x+20,tank.y+10+14);
		  if(tank.direct==1){
		  ctx.lineTo(tank.x+20+30,tank.y+10+14);}
		  else if(tank.direct==3){
		  ctx.lineTo(tank.x+20-30,tank.y+10+14);}
		  ctx.closePath();
		  ctx.stroke();
		  break;
	}
	 }
	